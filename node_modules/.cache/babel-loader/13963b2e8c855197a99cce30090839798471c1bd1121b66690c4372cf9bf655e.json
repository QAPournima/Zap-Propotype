{"ast":null,"code":"var _jsxFileName = \"/Users/pournima/Documents/Zap Release 1/ZapDashboard/zap-prototype/src/pages/LiveTest.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { logActivity } from '../utils/activityLogger';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:4001/api/execute-test';\nconst stepTypes = [{\n  value: 'click',\n  label: 'Click'\n}, {\n  value: 'input',\n  label: 'Input'\n}, {\n  value: 'navigation',\n  label: 'Navigation'\n}];\nexport default function LiveTest() {\n  _s();\n  const {\n    jiraId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const fromMySprint = new URLSearchParams(location.search).get('fromMySprint') === '1';\n  const testCaseNameFromQuery = new URLSearchParams(location.search).get('name') || '';\n  const isManual = new URLSearchParams(location.search).get('manual') === '1';\n  const [loading, setLoading] = useState(false);\n  const [results, setResults] = useState(null);\n  const [error, setError] = useState(null);\n  const [testCaseName, setTestCaseName] = useState(testCaseNameFromQuery);\n  const [testResult, setTestResult] = useState(null);\n  const [manualSteps, setManualSteps] = useState([]);\n  const wsRef = useRef(null);\n  const [saveMessage, setSaveMessage] = useState('');\n  const [manualTestStarted, setManualTestStarted] = useState(false);\n  const [manualTestHistory, setManualTestHistory] = useState([]);\n  const [saving, setSaving] = useState(false);\n  const [manualTestComplete, setManualTestComplete] = useState(false);\n  const [editingStepIdx, setEditingStepIdx] = useState(null);\n  const [editingStep, setEditingStep] = useState({\n    type: '',\n    selector: '',\n    value: ''\n  });\n  const [addStepIdx, setAddStepIdx] = useState(null);\n  const [newStep, setNewStep] = useState({\n    type: 'click',\n    selector: '',\n    value: ''\n  });\n  const [showBugModal, setShowBugModal] = useState(false);\n  const [bugDescription, setBugDescription] = useState('');\n  const [bugStatus, setBugStatus] = useState('');\n  const [manualStatus, setManualStatus] = useState('Not Started');\n  const [testCancelled, setTestCancelled] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [testState, setTestState] = useState('idle'); // 'idle', 'running', 'completed', 'cancelled'\n\n  useEffect(() => {\n    if (!jiraId || isManual) return; // Skip API call for manual test\n    setLoading(true);\n    setError(null);\n    setResults(null);\n    setTestCaseName('');\n    console.log('Fetching:', `${API_URL}/${jiraId}`);\n    fetch(`${API_URL}/${jiraId}`, {\n      method: 'POST'\n    }).then(res => res.json()).then(data => {\n      console.log('Received data:', data);\n      if (data.success) {\n        setResults(data.results);\n        setTestCaseName(data.testCaseName || jiraId);\n        setTestResult(data);\n      } else {\n        setError(data.error || 'Test execution failed');\n      }\n    }).catch(err => {\n      console.error('Fetch error:', err);\n      setError(err.message || 'Test execution failed');\n    }).finally(() => setLoading(false));\n  }, [jiraId, isManual]);\n\n  // Manual test WebSocket connection\n  useEffect(() => {\n    if (!manualTestStarted) return;\n    setManualTestComplete(false);\n    const ws = new window.WebSocket('ws://localhost:4050');\n    wsRef.current = ws;\n    ws.onmessage = event => {\n      const action = JSON.parse(event.data);\n      setManualSteps(prev => [...prev, action]);\n    };\n    ws.onclose = async () => {\n      setManualTestComplete(true);\n      setManualTestStarted(false);\n      console.log('Manual test WebSocket closed');\n      // Log manual test run to activity logs\n      let status = manualStatus.toLowerCase();\n      if (status === 'completed') status = 'done';else if (status === 'failed') status = 'failed';else status = 'in progress';\n      await logActivity({\n        title: `Manual Test Run: ${testCaseName}`,\n        description: `Manual test execution for ${testCaseName}`,\n        'Request Type': 'Test Case',\n        status,\n        'Output Type': 'Test Report',\n        createdDate: new Date().toISOString().split('T')[0]\n      });\n    };\n    return () => ws.close();\n  }, [manualTestStarted]);\n\n  // Fetch manual test history\n  const fetchManualTestHistory = () => {\n    fetch('/manual-tests.json').then(res => res.json()).then(data => setManualTestHistory(data.reverse())) // show most recent first\n    .catch(() => setManualTestHistory([]));\n  };\n\n  // Save steps as automated test (send to backend or show as JSON)\n  const saveSteps = () => {\n    setSaveMessage('');\n    setSaving(true);\n    fetch('/api/save-steps', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        steps: manualSteps,\n        name: testCaseName\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        setSaveMessage('Saved as automated test!');\n        setStatusMessage('Test saved as automation!');\n        setTestState('completed');\n        fetchManualTestHistory();\n        setManualTestComplete(true);\n        setManualTestStarted(false);\n        setManualStatus('Completed');\n      } else setSaveMessage('Failed to save: ' + (data.error || 'Unknown error'));\n    }).catch(err => setSaveMessage('Failed to save: ' + err.message)).finally(() => setSaving(false));\n  };\n\n  // Fetch history on mount\n  useEffect(() => {\n    fetchManualTestHistory();\n  }, []);\n\n  // Determine status\n  let status = 'In Progress';\n  if (results) {\n    if (results.some(step => step.status === 'failed')) status = 'Failed';else if (results.every(step => step.status === 'passed')) status = 'Passed';else status = 'In Progress';\n  }\n\n  // Get latest screenshot\n  const latestScreenshot = results && results.length > 0 ? results[results.length - 1].screenshot : null;\n\n  // Helper to group input steps by selector and show only the final value\n  const formattedManualSteps = [];\n  const lastInputBySelector = {};\n  manualSteps.forEach((step, idx) => {\n    if (step.type === 'input') {\n      lastInputBySelector[step.selector] = {\n        ...step,\n        idx\n      };\n    } else {\n      formattedManualSteps.push({\n        ...step,\n        idx\n      });\n    }\n  });\n  // Add the last input for each selector\n  Object.values(lastInputBySelector).forEach(inputStep => {\n    formattedManualSteps.push(inputStep);\n  });\n  // Sort by original order\n  formattedManualSteps.sort((a, b) => a.idx - b.idx);\n\n  // Remove a step\n  const removeStep = idx => {\n    setManualSteps(prev => prev.filter((_, i) => i !== idx));\n  };\n  // Move step up/down\n  const moveStep = (idx, dir) => {\n    setManualSteps(prev => {\n      const arr = [...prev];\n      const [removed] = arr.splice(idx, 1);\n      arr.splice(idx + dir, 0, removed);\n      return arr;\n    });\n  };\n  // Start editing a step\n  const startEditStep = (idx, step) => {\n    setEditingStepIdx(idx);\n    setEditingStep({\n      type: step.type,\n      selector: step.selector || '',\n      value: step.value || ''\n    });\n  };\n  // Save edited value\n  const saveEditStep = idx => {\n    setManualSteps(prev => prev.map((step, i) => i === idx ? {\n      ...step,\n      ...editingStep\n    } : step));\n    setEditingStepIdx(null);\n    setEditingStep({\n      type: '',\n      selector: '',\n      value: ''\n    });\n  };\n  // Cancel editing\n  const cancelEditStep = () => {\n    setEditingStepIdx(null);\n    setEditingStep({\n      type: '',\n      selector: '',\n      value: ''\n    });\n  };\n  // Cancel/Restart manual test\n  const cancelManualTest = () => {\n    setManualTestStarted(false);\n    setManualTestComplete(false);\n    setManualSteps([]);\n    setSaveMessage('');\n    setManualStatus('Stopped');\n    setTestCancelled(true);\n    setStatusMessage('Test process cancelled.');\n    setTestState('cancelled');\n  };\n  const restartManualTest = () => {\n    setManualTestStarted(false);\n    setManualTestComplete(false);\n    setManualSteps([]);\n    setSaveMessage('');\n    setTimeout(() => setManualTestStarted(true), 100);\n  };\n\n  // Auto-start manual test if jiraId is present\n  useEffect(() => {\n    if (jiraId && !manualTestStarted) {\n      setManualTestStarted(true);\n    }\n  }, [jiraId]);\n\n  // Format manual steps for bug description\n  const formatStepsForBug = () => formattedManualSteps.map((step, idx) => `${idx + 1}. [${step.type}] ${step.selector || step.url}${step.value ? ' = ' + step.value : ''}`).join('\\n');\n  const openBugModal = () => {\n    setBugDescription(formatStepsForBug());\n    setShowBugModal(true);\n    setBugStatus('');\n  };\n  const closeBugModal = () => setShowBugModal(false);\n  const submitBug = () => {\n    setBugStatus('');\n    fetch('/api/create-bug', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jiraId,\n        description: bugDescription\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) setBugStatus('Bug created successfully!');else setBugStatus('Failed to create bug: ' + (data.error || 'Unknown error'));\n    }).catch(err => setBugStatus('Failed to create bug: ' + err.message));\n  };\n  const startManualTest = () => {\n    setManualTestStarted(true);\n    setManualStatus('In Progress');\n  };\n  const handleStartNewTest = () => {\n    setManualTestStarted(false);\n    setManualTestComplete(false);\n    setManualSteps([]);\n    setSaveMessage('');\n    setManualStatus('Not Started');\n    setTestCancelled(false);\n    setStatusMessage('');\n    setTestState('running');\n    setTestCaseName('');\n    setResults(null);\n    setError(null);\n    setTestResult(null);\n    // Remove jiraId and query params from URL\n    navigate(`/live-test`, {\n      replace: true\n    });\n  };\n\n  // Add step handlers:\n  const startAddStep = idx => {\n    setAddStepIdx(idx);\n    setNewStep({\n      type: 'click',\n      selector: '',\n      value: ''\n    });\n  };\n  const saveAddStep = idx => {\n    if (!newStep.selector && !newStep.value) return; // Prevent adding empty step\n    setManualSteps(prev => {\n      const arr = [...prev];\n      arr.splice(idx + 1, 0, {\n        ...newStep\n      });\n      return arr;\n    });\n    setAddStepIdx(null);\n    setNewStep({\n      type: 'click',\n      selector: '',\n      value: ''\n    });\n  };\n  const cancelAddStep = () => {\n    setAddStepIdx(null);\n    setNewStep({\n      type: 'click',\n      selector: '',\n      value: ''\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-white dark:bg-neutral-900 text-gray-900 dark:text-gray-100 p-8\",\n    children: [fromMySprint && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 p-3 bg-blue-100 text-blue-800 rounded border border-blue-300 dark:bg-blue-900 dark:text-blue-100 dark:border-blue-700\",\n      children: \"Manual test process started from My Sprint. Please follow the steps below to execute your test.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Live Test Execution\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-2 text-lg font-semibold\",\n      children: [\"Test Case: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-blue-600 dark:text-blue-300\",\n        children: testCaseName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 62\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 flex items-center gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Status: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `px-3 py-1 rounded-full text-xs font-semibold ${manualStatus === 'Completed' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : manualStatus === 'In Progress' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' : manualStatus === 'Stopped' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' : 'bg-gray-200 text-gray-800 dark:bg-neutral-700 dark:text-gray-200'}`,\n        children: manualStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 text-green-600 text-lg\",\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 25\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-blue-500\",\n      children: \"Running test...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-500\",\n      children: error.includes('Target page, context or browser has been closed') ? 'The test browser was closed. Please restart the test to try again.' : error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }, this), latestScreenshot && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"font-medium mb-2\",\n        children: \"Live UI:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: latestScreenshot,\n        alt: \"Live Test UI\",\n        className: \"border rounded shadow max-w-xl w-full bg-white\",\n        style: {\n          minHeight: 200\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }, this), testResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: \"Test Case Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          children: testResult.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Steps:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: testResult.steps.map((step, idx) => {\n            const result = testResult.results[idx];\n            let status = (result === null || result === void 0 ? void 0 : result.status) || 'skipped';\n            let color = status === 'passed' ? 'green' : status === 'failed' ? 'red' : 'gray';\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              style: {\n                marginBottom: 16\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: step.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color,\n                  marginLeft: 8\n                },\n                children: [\"[\", status, \"]\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 21\n              }, this), (result === null || result === void 0 ? void 0 : result.screenshot) && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: result.screenshot,\n                  alt: \"step screenshot\",\n                  width: 120\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 23\n              }, this), (result === null || result === void 0 ? void 0 : result.error) && /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: 'red'\n                },\n                children: result.error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 23\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8\",\n      children: [(testState === 'idle' || testState === 'running') && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startManualTest,\n        className: `mb-4 px-4 py-2 rounded ${manualTestStarted && !saving ? 'bg-green-600' : 'bg-blue-600'} text-white`,\n        disabled: manualTestStarted || manualTestComplete || saving,\n        children: manualTestComplete ? 'Manual Test Complete' : saving ? 'Manual Test' : manualTestStarted ? 'Manual Test Running...' : 'Manual Test'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this), (manualTestStarted || manualTestComplete) && !testCancelled && testState !== 'completed' && testState !== 'cancelled' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: cancelManualTest,\n          className: \"ml-2 px-4 py-2 bg-gray-400 text-white rounded\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartManualTest,\n          className: \"ml-2 px-4 py-2 bg-yellow-500 text-white rounded\",\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), manualTestStarted && !testCancelled && testState !== 'completed' && testState !== 'cancelled' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold mb-2\",\n          children: \"Manual Test Recording (Live)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"space-y-2\",\n          children: [manualTestStarted && manualStatus === 'In Progress' && formattedManualSteps.map((step, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"p-2 rounded bg-neutral-100 dark:bg-neutral-800 flex flex-col md:flex-row md:items-center gap-2\",\n            children: [editingStepIdx === idx ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"px-2 py-1 rounded text-xs bg-gray-800 text-white dark:bg-gray-800 dark:text-white border border-gray-600\",\n                value: editingStep.type,\n                onChange: e => setEditingStep(s => ({\n                  ...s,\n                  type: e.target.value\n                })),\n                children: stepTypes.map(opt => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: opt.value,\n                  children: opt.label\n                }, opt.value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 401,\n                  columnNumber: 47\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\",\n                placeholder: \"Selector/Located\",\n                value: editingStep.selector,\n                onChange: e => setEditingStep(s => ({\n                  ...s,\n                  selector: e.target.value\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\",\n                placeholder: \"Value\",\n                value: editingStep.value,\n                onChange: e => setEditingStep(s => ({\n                  ...s,\n                  value: e.target.value\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => saveEditStep(idx),\n                className: \"ml-1 px-2 py-1 bg-green-500 text-white rounded text-xs\",\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: cancelEditStep,\n                className: \"ml-1 px-2 py-1 bg-gray-400 text-white rounded text-xs\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `inline-block px-2 py-1 rounded text-xs font-bold ${step.type === 'click' ? 'bg-blue-200 text-blue-800' : step.type === 'input' ? 'bg-yellow-200 text-yellow-800' : step.type === 'navigation' ? 'bg-green-200 text-green-800' : 'bg-gray-200 text-gray-800'}`,\n                children: step.type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-mono text-sm break-all\",\n                children: step.selector || step.url\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 23\n              }, this), step.value !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\",\n                children: [\"= \\\"\", step.value, \"\\\"\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => startEditStep(idx, step),\n                className: \"ml-1 px-1 bg-blue-500 text-white rounded text-xs\",\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => removeStep(idx),\n              className: \"ml-2 px-2 py-1 bg-red-500 text-white rounded text-xs\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 19\n            }, this), idx > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => moveStep(idx, -1),\n              className: \"ml-1 px-2 py-1 bg-gray-300 text-gray-800 rounded text-xs\",\n              children: \"\\u2191\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 31\n            }, this), idx < formattedManualSteps.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => moveStep(idx, 1),\n              className: \"ml-1 px-2 py-1 bg-gray-300 text-gray-800 rounded text-xs\",\n              children: \"\\u2193\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 61\n            }, this), addStepIdx === idx ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-col md:flex-row md:items-center gap-2 mt-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"px-2 py-1 rounded text-xs bg-gray-800 text-white dark:bg-gray-800 dark:text-white border border-gray-600\",\n                value: newStep.type,\n                onChange: e => setNewStep(s => ({\n                  ...s,\n                  type: e.target.value\n                })),\n                children: stepTypes.map(opt => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: opt.value,\n                  children: opt.label\n                }, opt.value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 439,\n                  columnNumber: 47\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\",\n                placeholder: \"Selector/Located\",\n                value: newStep.selector,\n                onChange: e => setNewStep(s => ({\n                  ...s,\n                  selector: e.target.value\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\",\n                placeholder: \"Value\",\n                value: newStep.value,\n                onChange: e => setNewStep(s => ({\n                  ...s,\n                  value: e.target.value\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => saveAddStep(idx),\n                className: \"ml-1 px-2 py-1 bg-green-500 text-white rounded text-xs\",\n                disabled: !newStep.selector && !newStep.value,\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: cancelAddStep,\n                className: \"ml-1 px-2 py-1 bg-gray-400 text-white rounded text-xs\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => startAddStep(idx),\n              className: \"ml-2 px-2 py-1 bg-blue-200 text-blue-800 rounded text-xs\",\n              children: \"+ Add Step Below\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 21\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 17\n          }, this)), manualTestStarted && manualStatus === 'In Progress' && (addStepIdx === formattedManualSteps.length ? /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"flex flex-col md:flex-row md:items-center gap-2 mt-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"px-2 py-1 rounded text-xs bg-gray-800 text-white dark:bg-gray-800 dark:text-white border border-gray-600\",\n              value: newStep.type,\n              onChange: e => setNewStep(s => ({\n                ...s,\n                type: e.target.value\n              })),\n              children: stepTypes.map(opt => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: opt.value,\n                children: opt.label\n              }, opt.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\",\n              placeholder: \"Selector/Located\",\n              value: newStep.selector,\n              onChange: e => setNewStep(s => ({\n                ...s,\n                selector: e.target.value\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\",\n              placeholder: \"Value\",\n              value: newStep.value,\n              onChange: e => setNewStep(s => ({\n                ...s,\n                value: e.target.value\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => saveAddStep(formattedManualSteps.length),\n              className: \"ml-1 px-2 py-1 bg-green-500 text-white rounded text-xs\",\n              disabled: !newStep.selector && !newStep.value,\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: cancelAddStep,\n              className: \"ml-1 px-2 py-1 bg-gray-400 text-white rounded text-xs\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => startAddStep(formattedManualSteps.length),\n              className: \"mt-2 px-2 py-1 bg-blue-200 text-blue-800 rounded text-xs\",\n              children: \"+ Add Step\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveSteps,\n          className: \"mt-4 px-4 py-2 bg-blue-600 text-white rounded\",\n          disabled: saving || saveMessage === 'Saved as automated test!',\n          children: saving ? 'Saving...' : saveMessage === 'Saved as automated test!' ? 'Saved!' : 'Save as Automated Test'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: saveMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-green-600 text-lg\",\n            children: saveMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), manualTestComplete && !testCancelled && testState !== 'cancelled' && null, (testState === 'completed' || testState === 'cancelled') && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartNewTest,\n        className: \"mt-4 px-4 py-2 bg-blue-600 text-white rounded\",\n        children: \"Start New Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), !loading && !error && !results && !(manualTestStarted || manualTestComplete) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-500 text-lg mt-12 text-center\",\n      children: [\"No test is currently running.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 40\n      }, this), \"Please execute a test case from the My Sprint page to see live results here.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 9\n    }, this), showBugModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white dark:bg-neutral-900 p-6 rounded shadow-lg w-full max-w-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-bold mb-2\",\n          children: \"Create Bug\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"w-full h-40 p-2 border rounded mb-2 bg-neutral-100 dark:bg-neutral-800 text-black dark:text-white\",\n          value: bugDescription,\n          onChange: e => setBugDescription(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: submitBug,\n            className: \"px-4 py-2 bg-blue-600 text-white rounded\",\n            children: \"Submit Bug\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: closeBugModal,\n            className: \"px-4 py-2 bg-gray-400 text-white rounded\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 13\n        }, this), bugStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2 text-green-600\",\n          children: bugStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n}\n_s(LiveTest, \"0qYnaXjMJ3u2ciBlzPAUORua97w=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c = LiveTest;\nvar _c;\n$RefreshReg$(_c, \"LiveTest\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useParams","useNavigate","useLocation","logActivity","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","stepTypes","value","label","LiveTest","_s","jiraId","navigate","location","fromMySprint","URLSearchParams","search","get","testCaseNameFromQuery","isManual","loading","setLoading","results","setResults","error","setError","testCaseName","setTestCaseName","testResult","setTestResult","manualSteps","setManualSteps","wsRef","saveMessage","setSaveMessage","manualTestStarted","setManualTestStarted","manualTestHistory","setManualTestHistory","saving","setSaving","manualTestComplete","setManualTestComplete","editingStepIdx","setEditingStepIdx","editingStep","setEditingStep","type","selector","addStepIdx","setAddStepIdx","newStep","setNewStep","showBugModal","setShowBugModal","bugDescription","setBugDescription","bugStatus","setBugStatus","manualStatus","setManualStatus","testCancelled","setTestCancelled","statusMessage","setStatusMessage","testState","setTestState","console","log","fetch","method","then","res","json","data","success","catch","err","message","finally","ws","window","WebSocket","current","onmessage","event","action","JSON","parse","prev","onclose","status","toLowerCase","title","description","createdDate","Date","toISOString","split","close","fetchManualTestHistory","reverse","saveSteps","headers","body","stringify","steps","name","some","step","every","latestScreenshot","length","screenshot","formattedManualSteps","lastInputBySelector","forEach","idx","push","Object","values","inputStep","sort","a","b","removeStep","filter","_","i","moveStep","dir","arr","removed","splice","startEditStep","saveEditStep","map","cancelEditStep","cancelManualTest","restartManualTest","setTimeout","formatStepsForBug","url","join","openBugModal","closeBugModal","submitBug","startManualTest","handleStartNewTest","replace","startAddStep","saveAddStep","cancelAddStep","className","children","fileName","_jsxFileName","lineNumber","columnNumber","includes","src","alt","style","minHeight","whiteSpace","result","color","marginBottom","fontWeight","marginLeft","width","onClick","disabled","onChange","e","s","target","opt","placeholder","undefined","_c","$RefreshReg$"],"sources":["/Users/pournima/Documents/Zap Release 1/ZapDashboard/zap-prototype/src/pages/LiveTest.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { logActivity } from '../utils/activityLogger';\n\nconst API_URL = 'http://localhost:4001/api/execute-test';\n\nconst stepTypes = [\n  { value: 'click', label: 'Click' },\n  { value: 'input', label: 'Input' },\n  { value: 'navigation', label: 'Navigation' },\n];\n\nexport default function LiveTest() {\n  const { jiraId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const fromMySprint = new URLSearchParams(location.search).get('fromMySprint') === '1';\n  const testCaseNameFromQuery = new URLSearchParams(location.search).get('name') || '';\n  const isManual = new URLSearchParams(location.search).get('manual') === '1';\n  const [loading, setLoading] = useState(false);\n  const [results, setResults] = useState(null);\n  const [error, setError] = useState(null);\n  const [testCaseName, setTestCaseName] = useState(testCaseNameFromQuery);\n  const [testResult, setTestResult] = useState(null);\n  const [manualSteps, setManualSteps] = useState([]);\n  const wsRef = useRef(null);\n  const [saveMessage, setSaveMessage] = useState('');\n  const [manualTestStarted, setManualTestStarted] = useState(false);\n  const [manualTestHistory, setManualTestHistory] = useState([]);\n  const [saving, setSaving] = useState(false);\n  const [manualTestComplete, setManualTestComplete] = useState(false);\n  const [editingStepIdx, setEditingStepIdx] = useState(null);\n  const [editingStep, setEditingStep] = useState({ type: '', selector: '', value: '' });\n  const [addStepIdx, setAddStepIdx] = useState(null);\n  const [newStep, setNewStep] = useState({ type: 'click', selector: '', value: '' });\n  const [showBugModal, setShowBugModal] = useState(false);\n  const [bugDescription, setBugDescription] = useState('');\n  const [bugStatus, setBugStatus] = useState('');\n  const [manualStatus, setManualStatus] = useState('Not Started');\n  const [testCancelled, setTestCancelled] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [testState, setTestState] = useState('idle'); // 'idle', 'running', 'completed', 'cancelled'\n\n  useEffect(() => {\n    if (!jiraId || isManual) return; // Skip API call for manual test\n    setLoading(true);\n    setError(null);\n    setResults(null);\n    setTestCaseName('');\n    console.log('Fetching:', `${API_URL}/${jiraId}`);\n    fetch(`${API_URL}/${jiraId}`, { method: 'POST' })\n      .then(res => res.json())\n      .then(data => {\n        console.log('Received data:', data);\n        if (data.success) {\n          setResults(data.results);\n          setTestCaseName(data.testCaseName || jiraId);\n          setTestResult(data);\n        } else {\n          setError(data.error || 'Test execution failed');\n        }\n      })\n      .catch(err => {\n        console.error('Fetch error:', err);\n        setError(err.message || 'Test execution failed');\n      })\n      .finally(() => setLoading(false));\n  }, [jiraId, isManual]);\n\n  // Manual test WebSocket connection\n  useEffect(() => {\n    if (!manualTestStarted) return;\n    setManualTestComplete(false);\n    const ws = new window.WebSocket('ws://localhost:4050');\n    wsRef.current = ws;\n    ws.onmessage = (event) => {\n      const action = JSON.parse(event.data);\n      setManualSteps(prev => [...prev, action]);\n    };\n    ws.onclose = async () => {\n      setManualTestComplete(true);\n      setManualTestStarted(false);\n      console.log('Manual test WebSocket closed');\n      // Log manual test run to activity logs\n      let status = manualStatus.toLowerCase();\n      if (status === 'completed') status = 'done';\n      else if (status === 'failed') status = 'failed';\n      else status = 'in progress';\n      await logActivity({\n        title: `Manual Test Run: ${testCaseName}`,\n        description: `Manual test execution for ${testCaseName}`,\n        'Request Type': 'Test Case',\n        status,\n        'Output Type': 'Test Report',\n        createdDate: new Date().toISOString().split('T')[0]\n      });\n    };\n    return () => ws.close();\n  }, [manualTestStarted]);\n\n  // Fetch manual test history\n  const fetchManualTestHistory = () => {\n    fetch('/manual-tests.json')\n      .then(res => res.json())\n      .then(data => setManualTestHistory(data.reverse())) // show most recent first\n      .catch(() => setManualTestHistory([]));\n  };\n\n  // Save steps as automated test (send to backend or show as JSON)\n  const saveSteps = () => {\n    setSaveMessage('');\n    setSaving(true);\n    fetch('/api/save-steps', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ steps: manualSteps, name: testCaseName })\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) {\n          setSaveMessage('Saved as automated test!');\n          setStatusMessage('Test saved as automation!');\n          setTestState('completed');\n          fetchManualTestHistory();\n          setManualTestComplete(true);\n          setManualTestStarted(false);\n          setManualStatus('Completed');\n        } else setSaveMessage('Failed to save: ' + (data.error || 'Unknown error'));\n      })\n      .catch(err => setSaveMessage('Failed to save: ' + err.message))\n      .finally(() => setSaving(false));\n  };\n\n  // Fetch history on mount\n  useEffect(() => {\n    fetchManualTestHistory();\n  }, []);\n\n  // Determine status\n  let status = 'In Progress';\n  if (results) {\n    if (results.some(step => step.status === 'failed')) status = 'Failed';\n    else if (results.every(step => step.status === 'passed')) status = 'Passed';\n    else status = 'In Progress';\n  }\n\n  // Get latest screenshot\n  const latestScreenshot = results && results.length > 0 ? results[results.length - 1].screenshot : null;\n\n  // Helper to group input steps by selector and show only the final value\n  const formattedManualSteps = [];\n  const lastInputBySelector = {};\n  manualSteps.forEach((step, idx) => {\n    if (step.type === 'input') {\n      lastInputBySelector[step.selector] = { ...step, idx };\n    } else {\n      formattedManualSteps.push({ ...step, idx });\n    }\n  });\n  // Add the last input for each selector\n  Object.values(lastInputBySelector).forEach(inputStep => {\n    formattedManualSteps.push(inputStep);\n  });\n  // Sort by original order\n  formattedManualSteps.sort((a, b) => a.idx - b.idx);\n\n  // Remove a step\n  const removeStep = idx => {\n    setManualSteps(prev => prev.filter((_, i) => i !== idx));\n  };\n  // Move step up/down\n  const moveStep = (idx, dir) => {\n    setManualSteps(prev => {\n      const arr = [...prev];\n      const [removed] = arr.splice(idx, 1);\n      arr.splice(idx + dir, 0, removed);\n      return arr;\n    });\n  };\n  // Start editing a step\n  const startEditStep = (idx, step) => {\n    setEditingStepIdx(idx);\n    setEditingStep({ type: step.type, selector: step.selector || '', value: step.value || '' });\n  };\n  // Save edited value\n  const saveEditStep = idx => {\n    setManualSteps(prev => prev.map((step, i) => i === idx ? { ...step, ...editingStep } : step));\n    setEditingStepIdx(null);\n    setEditingStep({ type: '', selector: '', value: '' });\n  };\n  // Cancel editing\n  const cancelEditStep = () => {\n    setEditingStepIdx(null);\n    setEditingStep({ type: '', selector: '', value: '' });\n  };\n  // Cancel/Restart manual test\n  const cancelManualTest = () => {\n    setManualTestStarted(false);\n    setManualTestComplete(false);\n    setManualSteps([]);\n    setSaveMessage('');\n    setManualStatus('Stopped');\n    setTestCancelled(true);\n    setStatusMessage('Test process cancelled.');\n    setTestState('cancelled');\n  };\n  const restartManualTest = () => {\n    setManualTestStarted(false);\n    setManualTestComplete(false);\n    setManualSteps([]);\n    setSaveMessage('');\n    setTimeout(() => setManualTestStarted(true), 100);\n  };\n\n  // Auto-start manual test if jiraId is present\n  useEffect(() => {\n    if (jiraId && !manualTestStarted) {\n      setManualTestStarted(true);\n    }\n  }, [jiraId]);\n\n  // Format manual steps for bug description\n  const formatStepsForBug = () =>\n    formattedManualSteps.map((step, idx) =>\n      `${idx + 1}. [${step.type}] ${step.selector || step.url}${step.value ? ' = ' + step.value : ''}`\n    ).join('\\n');\n\n  const openBugModal = () => {\n    setBugDescription(formatStepsForBug());\n    setShowBugModal(true);\n    setBugStatus('');\n  };\n  const closeBugModal = () => setShowBugModal(false);\n  const submitBug = () => {\n    setBugStatus('');\n    fetch('/api/create-bug', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ jiraId, description: bugDescription })\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) setBugStatus('Bug created successfully!');\n        else setBugStatus('Failed to create bug: ' + (data.error || 'Unknown error'));\n      })\n      .catch(err => setBugStatus('Failed to create bug: ' + err.message));\n  };\n\n  const startManualTest = () => {\n    setManualTestStarted(true);\n    setManualStatus('In Progress');\n  };\n\n  const handleStartNewTest = () => {\n    setManualTestStarted(false);\n    setManualTestComplete(false);\n    setManualSteps([]);\n    setSaveMessage('');\n    setManualStatus('Not Started');\n    setTestCancelled(false);\n    setStatusMessage('');\n    setTestState('running');\n    setTestCaseName('');\n    setResults(null);\n    setError(null);\n    setTestResult(null);\n    // Remove jiraId and query params from URL\n    navigate(`/live-test`, { replace: true });\n  };\n\n  // Add step handlers:\n  const startAddStep = idx => {\n    setAddStepIdx(idx);\n    setNewStep({ type: 'click', selector: '', value: '' });\n  };\n  const saveAddStep = idx => {\n    if (!newStep.selector && !newStep.value) return; // Prevent adding empty step\n    setManualSteps(prev => {\n      const arr = [...prev];\n      arr.splice(idx + 1, 0, { ...newStep });\n      return arr;\n    });\n    setAddStepIdx(null);\n    setNewStep({ type: 'click', selector: '', value: '' });\n  };\n  const cancelAddStep = () => {\n    setAddStepIdx(null);\n    setNewStep({ type: 'click', selector: '', value: '' });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white dark:bg-neutral-900 text-gray-900 dark:text-gray-100 p-8\">\n      {fromMySprint && (\n        <div className=\"mb-4 p-3 bg-blue-100 text-blue-800 rounded border border-blue-300 dark:bg-blue-900 dark:text-blue-100 dark:border-blue-700\">\n          Manual test process started from My Sprint. Please follow the steps below to execute your test.\n        </div>\n      )}\n      <h2 className=\"text-2xl font-bold mb-4\">Live Test Execution</h2>\n      <div className=\"mb-2 text-lg font-semibold\">Test Case: <span className=\"text-blue-600 dark:text-blue-300\">{testCaseName}</span></div>\n      <div className=\"mb-4 flex items-center gap-4\">\n        <span>Status: </span>\n        <span className={`px-3 py-1 rounded-full text-xs font-semibold ${\n          manualStatus === 'Completed'\n            ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n            : manualStatus === 'In Progress'\n            ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n            : manualStatus === 'Stopped'\n            ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n            : 'bg-gray-200 text-gray-800 dark:bg-neutral-700 dark:text-gray-200'\n        }`}>{manualStatus}</span>\n      </div>\n      {statusMessage && <div className=\"mb-4 text-green-600 text-lg\">{statusMessage}</div>}\n      {loading && <div className=\"text-blue-500\">Running test...</div>}\n      {error && (\n        <div className=\"text-red-500\">\n          {error.includes('Target page, context or browser has been closed')\n            ? 'The test browser was closed. Please restart the test to try again.'\n            : error}\n        </div>\n      )}\n      {latestScreenshot && (\n        <div className=\"mb-6\">\n          <div className=\"font-medium mb-2\">Live UI:</div>\n          <img src={latestScreenshot} alt=\"Live Test UI\" className=\"border rounded shadow max-w-xl w-full bg-white\" style={{ minHeight: 200 }} />\n        </div>\n      )}\n      {testResult && (\n        <div className=\"mt-6\">\n          <h3 className=\"text-lg font-semibold mb-2\">Test Case Details</h3>\n          <div>\n            <strong>Description:</strong>\n            <pre style={{ whiteSpace: 'pre-wrap' }}>{testResult.description}</pre>\n          </div>\n          <div>\n            <strong>Steps:</strong>\n            <ol>\n              {testResult.steps.map((step, idx) => {\n                const result = testResult.results[idx];\n                let status = result?.status || 'skipped';\n                let color = status === 'passed' ? 'green' : status === 'failed' ? 'red' : 'gray';\n                return (\n                  <li key={idx} style={{ marginBottom: 16 }}>\n                    <span style={{ fontWeight: 'bold' }}>{step.name}</span>\n                    <span style={{ color, marginLeft: 8 }}>\n                      [{status}]\n                    </span>\n                    {result?.screenshot && (\n                      <div>\n                        <img src={result.screenshot} alt=\"step screenshot\" width={120} />\n                      </div>\n                    )}\n                    {result?.error && (\n                      <div style={{ color: 'red' }}>{result.error}</div>\n                    )}\n                  </li>\n                );\n              })}\n            </ol>\n          </div>\n        </div>\n      )}\n      <div className=\"mt-8\">\n        {(testState === 'idle' || testState === 'running') && (\n          <button\n            onClick={startManualTest}\n            className={`mb-4 px-4 py-2 rounded ${\n              manualTestStarted && !saving\n                ? 'bg-green-600'\n                : 'bg-blue-600'\n            } text-white`}\n            disabled={manualTestStarted || manualTestComplete || saving}\n          >\n            {manualTestComplete\n              ? 'Manual Test Complete'\n              : saving\n                ? 'Manual Test'\n                : manualTestStarted\n                  ? 'Manual Test Running...'\n                  : 'Manual Test'}\n          </button>\n        )}\n        {(manualTestStarted || manualTestComplete) && !testCancelled && testState !== 'completed' && testState !== 'cancelled' && (\n          <>\n            <button onClick={cancelManualTest} className=\"ml-2 px-4 py-2 bg-gray-400 text-white rounded\">Cancel</button>\n            <button onClick={restartManualTest} className=\"ml-2 px-4 py-2 bg-yellow-500 text-white rounded\">Restart</button>\n          </>\n        )}\n        {manualTestStarted && !testCancelled && testState !== 'completed' && testState !== 'cancelled' && (\n          <>\n            <h3 className=\"text-lg font-semibold mb-2\">Manual Test Recording (Live)</h3>\n            <ol className=\"space-y-2\">\n              {manualTestStarted && manualStatus === 'In Progress' && formattedManualSteps.map((step, idx) => (\n                <li key={idx} className=\"p-2 rounded bg-neutral-100 dark:bg-neutral-800 flex flex-col md:flex-row md:items-center gap-2\">\n                  {editingStepIdx === idx ? (\n                    <>\n                      <select\n                        className=\"px-2 py-1 rounded text-xs bg-gray-800 text-white dark:bg-gray-800 dark:text-white border border-gray-600\"\n                        value={editingStep.type}\n                        onChange={e => setEditingStep(s => ({ ...s, type: e.target.value }))}\n                      >\n                        {stepTypes.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}\n                      </select>\n                      <input\n                        className=\"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\"\n                        placeholder=\"Selector/Located\"\n                        value={editingStep.selector}\n                        onChange={e => setEditingStep(s => ({ ...s, selector: e.target.value }))}\n                      />\n                      <input\n                        className=\"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\"\n                        placeholder=\"Value\"\n                        value={editingStep.value}\n                        onChange={e => setEditingStep(s => ({ ...s, value: e.target.value }))}\n                      />\n                      <button onClick={() => saveEditStep(idx)} className=\"ml-1 px-2 py-1 bg-green-500 text-white rounded text-xs\">Save</button>\n                      <button onClick={cancelEditStep} className=\"ml-1 px-2 py-1 bg-gray-400 text-white rounded text-xs\">Cancel</button>\n                    </>\n                  ) : (\n                    <>\n                      <span className={`inline-block px-2 py-1 rounded text-xs font-bold ${step.type === 'click' ? 'bg-blue-200 text-blue-800' : step.type === 'input' ? 'bg-yellow-200 text-yellow-800' : step.type === 'navigation' ? 'bg-green-200 text-green-800' : 'bg-gray-200 text-gray-800'}`}>{step.type}</span>\n                      <span className=\"font-mono text-sm break-all\">{step.selector || step.url}</span>\n                      {step.value !== undefined && (\n                        <span className=\"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\">= \"{step.value}\"</span>\n                      )}\n                      <button onClick={() => startEditStep(idx, step)} className=\"ml-1 px-1 bg-blue-500 text-white rounded text-xs\">Edit</button>\n                    </>\n                  )}\n                  <button onClick={() => removeStep(idx)} className=\"ml-2 px-2 py-1 bg-red-500 text-white rounded text-xs\">Delete</button>\n                  {idx > 0 && <button onClick={() => moveStep(idx, -1)} className=\"ml-1 px-2 py-1 bg-gray-300 text-gray-800 rounded text-xs\">↑</button>}\n                  {idx < formattedManualSteps.length - 1 && <button onClick={() => moveStep(idx, 1)} className=\"ml-1 px-2 py-1 bg-gray-300 text-gray-800 rounded text-xs\">↓</button>}\n                  {/* Add Step button below each step */}\n                  {addStepIdx === idx ? (\n                    <div className=\"flex flex-col md:flex-row md:items-center gap-2 mt-2\">\n                      <select\n                        className=\"px-2 py-1 rounded text-xs bg-gray-800 text-white dark:bg-gray-800 dark:text-white border border-gray-600\"\n                        value={newStep.type}\n                        onChange={e => setNewStep(s => ({ ...s, type: e.target.value }))}\n                      >\n                        {stepTypes.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}\n                      </select>\n                      <input\n                        className=\"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\"\n                        placeholder=\"Selector/Located\"\n                        value={newStep.selector}\n                        onChange={e => setNewStep(s => ({ ...s, selector: e.target.value }))}\n                      />\n                      <input\n                        className=\"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\"\n                        placeholder=\"Value\"\n                        value={newStep.value}\n                        onChange={e => setNewStep(s => ({ ...s, value: e.target.value }))}\n                      />\n                      <button onClick={() => saveAddStep(idx)} className=\"ml-1 px-2 py-1 bg-green-500 text-white rounded text-xs\" disabled={!newStep.selector && !newStep.value}>Add</button>\n                      <button onClick={cancelAddStep} className=\"ml-1 px-2 py-1 bg-gray-400 text-white rounded text-xs\">Cancel</button>\n                    </div>\n                  ) : (\n                    <button onClick={() => startAddStep(idx)} className=\"ml-2 px-2 py-1 bg-blue-200 text-blue-800 rounded text-xs\">+ Add Step Below</button>\n                  )}\n                </li>\n              ))}\n              {/* Add Step at the end */}\n              {manualTestStarted && manualStatus === 'In Progress' && (\n                addStepIdx === formattedManualSteps.length ? (\n                  <li className=\"flex flex-col md:flex-row md:items-center gap-2 mt-2\">\n                    <select\n                      className=\"px-2 py-1 rounded text-xs bg-gray-800 text-white dark:bg-gray-800 dark:text-white border border-gray-600\"\n                      value={newStep.type}\n                      onChange={e => setNewStep(s => ({ ...s, type: e.target.value }))}\n                    >\n                      {stepTypes.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}\n                    </select>\n                    <input\n                      className=\"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\"\n                      placeholder=\"Selector/Located\"\n                      value={newStep.selector}\n                      onChange={e => setNewStep(s => ({ ...s, selector: e.target.value }))}\n                    />\n                    <input\n                      className=\"ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded font-mono text-xs\"\n                      placeholder=\"Value\"\n                      value={newStep.value}\n                      onChange={e => setNewStep(s => ({ ...s, value: e.target.value }))}\n                    />\n                    <button onClick={() => saveAddStep(formattedManualSteps.length)} className=\"ml-1 px-2 py-1 bg-green-500 text-white rounded text-xs\" disabled={!newStep.selector && !newStep.value}>Add</button>\n                    <button onClick={cancelAddStep} className=\"ml-1 px-2 py-1 bg-gray-400 text-white rounded text-xs\">Cancel</button>\n                  </li>\n                ) : (\n                  <li>\n                    <button onClick={() => startAddStep(formattedManualSteps.length)} className=\"mt-2 px-2 py-1 bg-blue-200 text-blue-800 rounded text-xs\">+ Add Step</button>\n                  </li>\n                )\n              )}\n            </ol>\n            <button\n              onClick={saveSteps}\n              className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded\"\n              disabled={saving || saveMessage === 'Saved as automated test!'}\n            >\n              {saving ? 'Saving...' : saveMessage === 'Saved as automated test!' ? 'Saved!' : 'Save as Automated Test'}\n            </button>\n            <div className=\"mt-4\">\n              {saveMessage && <div className=\"text-green-600 text-lg\">{saveMessage}</div>}\n            </div>\n          </>\n        )}\n        {manualTestComplete && !testCancelled && testState !== 'cancelled' && (\n          null\n        )}\n        {(testState === 'completed' || testState === 'cancelled') && (\n          <button\n            onClick={handleStartNewTest}\n            className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded\"\n          >\n            Start New Test\n          </button>\n        )}\n      </div>\n      {!loading && !error && !results && !(manualTestStarted || manualTestComplete) && (\n        <div className=\"text-gray-500 text-lg mt-12 text-center\">\n          No test is currently running.<br />\n          Please execute a test case from the My Sprint page to see live results here.\n        </div>\n      )}\n      {showBugModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50\">\n          <div className=\"bg-white dark:bg-neutral-900 p-6 rounded shadow-lg w-full max-w-lg\">\n            <h2 className=\"text-lg font-bold mb-2\">Create Bug</h2>\n            <textarea\n              className=\"w-full h-40 p-2 border rounded mb-2 bg-neutral-100 dark:bg-neutral-800 text-black dark:text-white\"\n              value={bugDescription}\n              onChange={e => setBugDescription(e.target.value)}\n            />\n            <div className=\"flex gap-2\">\n              <button onClick={submitBug} className=\"px-4 py-2 bg-blue-600 text-white rounded\">Submit Bug</button>\n              <button onClick={closeBugModal} className=\"px-4 py-2 bg-gray-400 text-white rounded\">Cancel</button>\n            </div>\n            {bugStatus && <div className=\"mt-2 text-green-600\">{bugStatus}</div>}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}