{"ast":null,"code":"import axios from 'axios';\n\n/**\n * Helper function to log activities in the system\n * @param {Object} activity - The activity to log\n * @param {string} activity.title - Title of the activity\n * @param {string} activity.description - Description of the activity\n * @param {string} activity['Request Type'] - Type of request (e.g., 'Jira id', 'Web Link', 'PDF document')\n * @param {string} activity.status - Status of the activity ('Passed', 'Failed', 'In Progress')\n * @param {string} activity['Output Type'] - Type of output (e.g., 'jira ticket', 'PDF', 'Automation Script')\n * @returns {Promise<Object>} The logged activity object\n */\nexport const logActivity = async activity => {\n  try {\n    // Add current date if not provided\n    if (!activity.createdDate) {\n      activity.createdDate = new Date().toISOString().split('T')[0];\n    }\n\n    // Make POST request to activity logs API\n    const response = await axios.post('http://localhost:4000/api/activity-logs', activity);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to log activity:', error);\n    throw error;\n  }\n};\n\n/**\n * Predefined activity types for consistent logging\n */\nexport const ActivityTypes = {\n  TEST_CASE: {\n    'Request Type': 'Jira id',\n    'Output Type': 'jira ticket'\n  },\n  AUTOMATION_SCRIPT: {\n    'Request Type': 'Jira id',\n    'Output Type': 'Automation Script'\n  },\n  USER_STORY: {\n    'Request Type': 'Web Link',\n    'Output Type': 'user storyPDF'\n  },\n  BUG: {\n    'Request Type': 'Jira id',\n    'Output Type': 'jira ticket'\n  },\n  PDF_DOCUMENT: {\n    'Request Type': 'PDF document',\n    'Output Type': 'jira ticket'\n  }\n};\n\n/**\n * Helper function to create a standardized activity object\n * @param {string} title - Title of the activity\n * @param {string} description - Description of the activity\n * @param {Object} type - Activity type from ActivityTypes\n * @param {string} status - Status of the activity\n * @returns {Object} Standardized activity object\n */\nexport const createActivityObject = (title, description, type, status = 'new') => {\n  return {\n    title,\n    description,\n    'Request Type': type['Request Type'],\n    status,\n    'Output Type': type['Output Type']\n  };\n};\n\n/**\n * Helper function to update an activity log by id\n * @param {number} id - The id of the activity log to update\n * @param {Object} updates - The fields to update\n * @returns {Promise<Object>} The updated activity log object\n */\nexport const updateActivityLog = async (id, updates) => {\n  try {\n    const response = await axios.put(`http://localhost:4000/api/activity-logs/${id}`, updates);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to update activity log:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","logActivity","activity","createdDate","Date","toISOString","split","response","post","data","error","console","ActivityTypes","TEST_CASE","AUTOMATION_SCRIPT","USER_STORY","BUG","PDF_DOCUMENT","createActivityObject","title","description","type","status","updateActivityLog","id","updates","put"],"sources":["/Users/pournima/Documents/Zap Release 1/ZapDashboard/zap-prototype/src/utils/activityLogger.js"],"sourcesContent":["import axios from 'axios';\n\n/**\n * Helper function to log activities in the system\n * @param {Object} activity - The activity to log\n * @param {string} activity.title - Title of the activity\n * @param {string} activity.description - Description of the activity\n * @param {string} activity['Request Type'] - Type of request (e.g., 'Jira id', 'Web Link', 'PDF document')\n * @param {string} activity.status - Status of the activity ('Passed', 'Failed', 'In Progress')\n * @param {string} activity['Output Type'] - Type of output (e.g., 'jira ticket', 'PDF', 'Automation Script')\n * @returns {Promise<Object>} The logged activity object\n */\nexport const logActivity = async (activity) => {\n  try {\n    // Add current date if not provided\n    if (!activity.createdDate) {\n      activity.createdDate = new Date().toISOString().split('T')[0];\n    }\n\n    // Make POST request to activity logs API\n    const response = await axios.post('http://localhost:4000/api/activity-logs', activity);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to log activity:', error);\n    throw error;\n  }\n};\n\n/**\n * Predefined activity types for consistent logging\n */\nexport const ActivityTypes = {\n  TEST_CASE: {\n    'Request Type': 'Jira id',\n    'Output Type': 'jira ticket'\n  },\n  AUTOMATION_SCRIPT: {\n    'Request Type': 'Jira id',\n    'Output Type': 'Automation Script'\n  },\n  USER_STORY: {\n    'Request Type': 'Web Link',\n    'Output Type': 'user storyPDF'\n  },\n  BUG: {\n    'Request Type': 'Jira id',\n    'Output Type': 'jira ticket'\n  },\n  PDF_DOCUMENT: {\n    'Request Type': 'PDF document',\n    'Output Type': 'jira ticket'\n  }\n};\n\n/**\n * Helper function to create a standardized activity object\n * @param {string} title - Title of the activity\n * @param {string} description - Description of the activity\n * @param {Object} type - Activity type from ActivityTypes\n * @param {string} status - Status of the activity\n * @returns {Object} Standardized activity object\n */\nexport const createActivityObject = (title, description, type, status = 'new') => {\n  return {\n    title,\n    description,\n    'Request Type': type['Request Type'],\n    status,\n    'Output Type': type['Output Type']\n  };\n};\n\n/**\n * Helper function to update an activity log by id\n * @param {number} id - The id of the activity log to update\n * @param {Object} updates - The fields to update\n * @returns {Promise<Object>} The updated activity log object\n */\nexport const updateActivityLog = async (id, updates) => {\n  try {\n    const response = await axios.put(`http://localhost:4000/api/activity-logs/${id}`, updates);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to update activity log:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,QAAQ,IAAK;EAC7C,IAAI;IACF;IACA,IAAI,CAACA,QAAQ,CAACC,WAAW,EAAE;MACzBD,QAAQ,CAACC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/D;;IAEA;IACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,yCAAyC,EAAEN,QAAQ,CAAC;IACtF,OAAOK,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAG;EAC3BC,SAAS,EAAE;IACT,cAAc,EAAE,SAAS;IACzB,aAAa,EAAE;EACjB,CAAC;EACDC,iBAAiB,EAAE;IACjB,cAAc,EAAE,SAAS;IACzB,aAAa,EAAE;EACjB,CAAC;EACDC,UAAU,EAAE;IACV,cAAc,EAAE,UAAU;IAC1B,aAAa,EAAE;EACjB,CAAC;EACDC,GAAG,EAAE;IACH,cAAc,EAAE,SAAS;IACzB,aAAa,EAAE;EACjB,CAAC;EACDC,YAAY,EAAE;IACZ,cAAc,EAAE,cAAc;IAC9B,aAAa,EAAE;EACjB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAACC,KAAK,EAAEC,WAAW,EAAEC,IAAI,EAAEC,MAAM,GAAG,KAAK,KAAK;EAChF,OAAO;IACLH,KAAK;IACLC,WAAW;IACX,cAAc,EAAEC,IAAI,CAAC,cAAc,CAAC;IACpCC,MAAM;IACN,aAAa,EAAED,IAAI,CAAC,aAAa;EACnC,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,iBAAiB,GAAG,MAAAA,CAAOC,EAAE,EAAEC,OAAO,KAAK;EACtD,IAAI;IACF,MAAMlB,QAAQ,GAAG,MAAMP,KAAK,CAAC0B,GAAG,CAAC,2CAA2CF,EAAE,EAAE,EAAEC,OAAO,CAAC;IAC1F,OAAOlB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}