{"ast":null,"code":"import { http } from 'msw';\n// import testCases from '../mock-data/test-cases.json';\n// import bugs from '../mock-data/bugs.json';\nimport dashboardData from '../mock-data/dashboard';\nimport activityLogs from '../mock-data/activityLogs.json';\nimport mysprintActions from '../mock-data/mysprint-actions.json';\nimport manualTests from '../mock-data/manual-tests.json';\nimport automationRunLogs from '../mock-data/automationrunlogs.json';\nimport jiraProjects from '../mock-data/jiraProjects.json';\nimport sprintIssues from '../mock-data/sprintIssues.json';\n\n// Module-level counter for create-issue calls\nlet createIssueCallCount = 0;\nexport const handlers = [\n// Mock GET /api/test-cases\n// http.get('/api/test-cases', (req, res, ctx) => {\n//   return res(ctx.status(200), ctx.json(testCases));\n// }),\n\n// Mock GET /api/bugs\n// http.get('/api/bugs', (req, res, ctx) => {\n//   return res(ctx.status(200), ctx.json(bugs));\n// }),\n\n// Mock POST /api/login\nhttp.post('/api/login', () => {\n  return new Response(JSON.stringify({\n    token: 'mock-token',\n    user: {\n      name: 'Demo User'\n    }\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.get('/api/applicationsettings', () => {\n  return new Response(JSON.stringify({\n    jira: {\n      projectId: 'SCRUM'\n    },\n    theme: 'dark',\n    notifications: true,\n    testCoverage: 94,\n    assignedTasks: 6,\n    testCasesCreated: 30,\n    bugsReported: 12,\n    automationScripts: 8,\n    failedTests: 2\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.get('/api/activity-logs', () => {\n  return new Response(JSON.stringify(activityLogs), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.get('/api/settings/profile', () => {\n  return new Response(JSON.stringify({\n    name: 'Demo User',\n    email: 'demo@zap.com',\n    role: 'QA',\n    avatar: 'https://ui-avatars.com/api/?name=Demo+User'\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.put('/api/settings/profile', () => {\n  return new Response(null, {\n    status: 200\n  });\n}), http.get('/api/dashboard', () => {\n  return new Response(JSON.stringify(dashboardData), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.get('/api/mysprint-actions', () => {\n  return new Response(JSON.stringify(mysprintActions), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.get('/manual-tests.json', () => {\n  return new Response(JSON.stringify(manualTests), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.get('/automationrunlogs.json', () => {\n  return new Response(JSON.stringify(automationRunLogs), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.post('/api/activity-logs', async req => {\n  const body = await req.request.json();\n  // Optionally, add an id or timestamp to the returned log\n  return new Response(JSON.stringify({\n    ...body,\n    id: Date.now()\n  }), {\n    status: 201,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.post('/api/run-automation-test', async req => {\n  // Return a mock test run result\n  return new Response(JSON.stringify({\n    success: true,\n    run: {\n      status: 'passed',\n      htmlReport: '/mock-report.html',\n      name: 'Mock Automated Test'\n    }\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.post('/api/save-steps', async req => {\n  return new Response(JSON.stringify({\n    success: true\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.get('/api/jira/projects', () => {\n  return new Response(JSON.stringify(jiraProjects), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.get('/api/jira/projects/:projectId/sprint/current', () => {\n  return new Response(JSON.stringify({\n    name: 'Demo Sprint',\n    state: 'active',\n    startDate: '2025-06-02',\n    endDate: '2025-06-23',\n    goal: 'Complete all UI components and backend flows.',\n    issues: sprintIssues\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.put('/api/jira/project', async req => {\n  // Optionally parse the body if needed\n  return new Response(JSON.stringify({\n    success: true\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}),\n// Handler for POST /api/ai/create-issue\nhttp.post('/api/ai/create-issue', async req => {\n  createIssueCallCount++;\n  // Fail for the first and third call (simulate error for 2 records)\n  if (createIssueCallCount === 1 || createIssueCallCount === 3) {\n    return new Response(JSON.stringify({\n      error: 'Failed to create issue (demo error)'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  // Otherwise, return a fake Jira ID\n  const body = await req.request.json();\n  return new Response(JSON.stringify({\n    jiraId: `SCRUM-10${createIssueCallCount}`\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n})\n\n// Add more handlers as needed...\n];","map":{"version":3,"names":["http","dashboardData","activityLogs","mysprintActions","manualTests","automationRunLogs","jiraProjects","sprintIssues","createIssueCallCount","handlers","post","Response","JSON","stringify","token","user","name","status","headers","get","jira","projectId","theme","notifications","testCoverage","assignedTasks","testCasesCreated","bugsReported","automationScripts","failedTests","email","role","avatar","put","req","body","request","json","id","Date","now","success","run","htmlReport","state","startDate","endDate","goal","issues","error","jiraId"],"sources":["/Users/pournima/Documents/Zap Release 1/ZapDashboard/zap-prototype/src/mocks/handlers.js"],"sourcesContent":["import { http } from 'msw';\n// import testCases from '../mock-data/test-cases.json';\n// import bugs from '../mock-data/bugs.json';\nimport dashboardData from '../mock-data/dashboard';\nimport activityLogs from '../mock-data/activityLogs.json';\nimport mysprintActions from '../mock-data/mysprint-actions.json';\nimport manualTests from '../mock-data/manual-tests.json';\nimport automationRunLogs from '../mock-data/automationrunlogs.json';\nimport jiraProjects from '../mock-data/jiraProjects.json';\nimport sprintIssues from '../mock-data/sprintIssues.json';\n\n// Module-level counter for create-issue calls\nlet createIssueCallCount = 0;\n\nexport const handlers = [\n  // Mock GET /api/test-cases\n  // http.get('/api/test-cases', (req, res, ctx) => {\n  //   return res(ctx.status(200), ctx.json(testCases));\n  // }),\n\n  // Mock GET /api/bugs\n  // http.get('/api/bugs', (req, res, ctx) => {\n  //   return res(ctx.status(200), ctx.json(bugs));\n  // }),\n\n  // Mock POST /api/login\n  http.post('/api/login', () => {\n    return new Response(\n      JSON.stringify({ token: 'mock-token', user: { name: 'Demo User' } }),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }),\n\n  http.get('/api/applicationsettings', () => {\n    return new Response(\n      JSON.stringify({\n        jira: { projectId: 'SCRUM' },\n        theme: 'dark',\n        notifications: true,\n        testCoverage: 94,\n        assignedTasks: 6,\n        testCasesCreated: 30,\n        bugsReported: 12,\n        automationScripts: 8,\n        failedTests: 2,\n      }),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }),\n\n  http.get('/api/activity-logs', () => {\n    return new Response(\n      JSON.stringify(activityLogs),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  }),\n\n  http.get('/api/settings/profile', () => {\n    return new Response(\n      JSON.stringify({\n        name: 'Demo User',\n        email: 'demo@zap.com',\n        role: 'QA',\n        avatar: 'https://ui-avatars.com/api/?name=Demo+User'\n      }),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }),\n\n  http.put('/api/settings/profile', () => {\n    return new Response(null, { status: 200 });\n  }),\n\n  http.get('/api/dashboard', () => {\n    return new Response(\n      JSON.stringify(dashboardData),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }),\n\n  http.get('/api/mysprint-actions', () => {\n    return new Response(\n      JSON.stringify(mysprintActions),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }),\n\n  http.get('/manual-tests.json', () => {\n    return new Response(\n      JSON.stringify(manualTests),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }),\n\n  http.get('/automationrunlogs.json', () => {\n    return new Response(\n      JSON.stringify(automationRunLogs),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }),\n\n  http.post('/api/activity-logs', async (req) => {\n    const body = await req.request.json();\n    // Optionally, add an id or timestamp to the returned log\n    return new Response(\n      JSON.stringify({ ...body, id: Date.now() }),\n      {\n        status: 201,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }),\n\n  http.post('/api/run-automation-test', async (req) => {\n    // Return a mock test run result\n    return new Response(\n      JSON.stringify({\n        success: true,\n        run: {\n          status: 'passed',\n          htmlReport: '/mock-report.html',\n          name: 'Mock Automated Test'\n        }\n      }),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  }),\n\n  http.post('/api/save-steps', async (req) => {\n    return new Response(\n      JSON.stringify({ success: true }),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  }),\n\n  http.get('/api/jira/projects', () => {\n    return new Response(\n      JSON.stringify(jiraProjects),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  }),\n\n  http.get('/api/jira/projects/:projectId/sprint/current', () => {\n    return new Response(\n      JSON.stringify({\n        name: 'Demo Sprint',\n        state: 'active',\n        startDate: '2025-06-02',\n        endDate: '2025-06-23',\n        goal: 'Complete all UI components and backend flows.',\n        issues: sprintIssues\n      }),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  }),\n\n  http.put('/api/jira/project', async (req) => {\n    // Optionally parse the body if needed\n    return new Response(\n      JSON.stringify({ success: true }),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  }),\n\n  // Handler for POST /api/ai/create-issue\n  http.post('/api/ai/create-issue', async (req) => {\n    createIssueCallCount++;\n    // Fail for the first and third call (simulate error for 2 records)\n    if (createIssueCallCount === 1 || createIssueCallCount === 3) {\n      return new Response(\n        JSON.stringify({ error: 'Failed to create issue (demo error)' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n    // Otherwise, return a fake Jira ID\n    const body = await req.request.json();\n    return new Response(\n      JSON.stringify({ jiraId: `SCRUM-10${createIssueCallCount}` }),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  }),\n\n  // Add more handlers as needed...\n];"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}