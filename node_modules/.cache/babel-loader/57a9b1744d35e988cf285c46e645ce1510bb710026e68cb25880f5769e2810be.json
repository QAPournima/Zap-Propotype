{"ast":null,"code":"import { http } from 'msw';\n// import testCases from '../mock-data/test-cases.json';\n// import bugs from '../mock-data/bugs.json';\nimport dashboardData from '../mock-data/dashboard';\nimport activityLogs from '../mock-data/activityLogs.json';\nexport const handlers = [\n// Mock GET /api/test-cases\n// http.get('/api/test-cases', (req, res, ctx) => {\n//   return res(ctx.status(200), ctx.json(testCases));\n// }),\n\n// Mock GET /api/bugs\n// http.get('/api/bugs', (req, res, ctx) => {\n//   return res(ctx.status(200), ctx.json(bugs));\n// }),\n\n// Mock POST /api/login\nhttp.post('/api/login', () => {\n  return new Response(JSON.stringify({\n    token: 'mock-token',\n    user: {\n      name: 'Demo User'\n    }\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.get('/api/applicationsettings', () => {\n  return new Response(JSON.stringify({\n    theme: 'dark',\n    notifications: true,\n    testCoverage: 94,\n    assignedTasks: 6,\n    testCasesCreated: 30,\n    bugsReported: 12,\n    automationScripts: 8,\n    failedTests: 2\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.get('/api/activity-logs', () => {\n  return new Response(JSON.stringify({\n    logs: activityLogs\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.get('/api/settings/profile', () => {\n  return new Response(JSON.stringify({\n    name: 'Demo User',\n    email: 'demo@zap.com',\n    role: 'QA',\n    avatar: 'https://ui-avatars.com/api/?name=Demo+User'\n  }), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}), http.put('/api/settings/profile', () => {\n  return new Response(null, {\n    status: 200\n  });\n}), http.get('/api/dashboard', () => {\n  return new Response(JSON.stringify(dashboardData), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n})\n\n// Add more handlers as needed...\n];","map":{"version":3,"names":["http","dashboardData","activityLogs","handlers","post","Response","JSON","stringify","token","user","name","status","headers","get","theme","notifications","testCoverage","assignedTasks","testCasesCreated","bugsReported","automationScripts","failedTests","logs","email","role","avatar","put"],"sources":["/Users/pournima/Documents/Zap Release 1/ZapDashboard/zap-prototype/src/mocks/handlers.js"],"sourcesContent":["import { http } from 'msw';\n// import testCases from '../mock-data/test-cases.json';\n// import bugs from '../mock-data/bugs.json';\nimport dashboardData from '../mock-data/dashboard';\nimport activityLogs from '../mock-data/activityLogs.json';\n\nexport const handlers = [\n  // Mock GET /api/test-cases\n  // http.get('/api/test-cases', (req, res, ctx) => {\n  //   return res(ctx.status(200), ctx.json(testCases));\n  // }),\n\n  // Mock GET /api/bugs\n  // http.get('/api/bugs', (req, res, ctx) => {\n  //   return res(ctx.status(200), ctx.json(bugs));\n  // }),\n\n  // Mock POST /api/login\n  http.post('/api/login', () => {\n    return new Response(\n      JSON.stringify({ token: 'mock-token', user: { name: 'Demo User' } }),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }),\n\n  http.get('/api/applicationsettings', () => {\n    return new Response(\n      JSON.stringify({\n        theme: 'dark',\n        notifications: true,\n        testCoverage: 94,\n        assignedTasks: 6,\n        testCasesCreated: 30,\n        bugsReported: 12,\n        automationScripts: 8,\n        failedTests: 2,\n      }),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }),\n\n  http.get('/api/activity-logs', () => {\n    return new Response(\n      JSON.stringify({ logs: activityLogs }),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  }),\n\n  http.get('/api/settings/profile', () => {\n    return new Response(\n      JSON.stringify({\n        name: 'Demo User',\n        email: 'demo@zap.com',\n        role: 'QA',\n        avatar: 'https://ui-avatars.com/api/?name=Demo+User'\n      }),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }),\n\n  http.put('/api/settings/profile', () => {\n    return new Response(null, { status: 200 });\n  }),\n\n  http.get('/api/dashboard', () => {\n    return new Response(\n      JSON.stringify(dashboardData),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }),\n\n  // Add more handlers as needed...\n];"],"mappings":"AAAA,SAASA,IAAI,QAAQ,KAAK;AAC1B;AACA;AACA,OAAOC,aAAa,MAAM,wBAAwB;AAClD,OAAOC,YAAY,MAAM,gCAAgC;AAEzD,OAAO,MAAMC,QAAQ,GAAG;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACAH,IAAI,CAACI,IAAI,CAAC,YAAY,EAAE,MAAM;EAC5B,OAAO,IAAIC,QAAQ,CACjBC,IAAI,CAACC,SAAS,CAAC;IAAEC,KAAK,EAAE,YAAY;IAAEC,IAAI,EAAE;MAAEC,IAAI,EAAE;IAAY;EAAE,CAAC,CAAC,EACpE;IACEC,MAAM,EAAE,GAAG;IACXC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CACF,CAAC;AACH,CAAC,CAAC,EAEFZ,IAAI,CAACa,GAAG,CAAC,0BAA0B,EAAE,MAAM;EACzC,OAAO,IAAIR,QAAQ,CACjBC,IAAI,CAACC,SAAS,CAAC;IACbO,KAAK,EAAE,MAAM;IACbC,aAAa,EAAE,IAAI;IACnBC,YAAY,EAAE,EAAE;IAChBC,aAAa,EAAE,CAAC;IAChBC,gBAAgB,EAAE,EAAE;IACpBC,YAAY,EAAE,EAAE;IAChBC,iBAAiB,EAAE,CAAC;IACpBC,WAAW,EAAE;EACf,CAAC,CAAC,EACF;IACEV,MAAM,EAAE,GAAG;IACXC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CACF,CAAC;AACH,CAAC,CAAC,EAEFZ,IAAI,CAACa,GAAG,CAAC,oBAAoB,EAAE,MAAM;EACnC,OAAO,IAAIR,QAAQ,CACjBC,IAAI,CAACC,SAAS,CAAC;IAAEe,IAAI,EAAEpB;EAAa,CAAC,CAAC,EACtC;IAAES,MAAM,EAAE,GAAG;IAAEC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB;EAAE,CACjE,CAAC;AACH,CAAC,CAAC,EAEFZ,IAAI,CAACa,GAAG,CAAC,uBAAuB,EAAE,MAAM;EACtC,OAAO,IAAIR,QAAQ,CACjBC,IAAI,CAACC,SAAS,CAAC;IACbG,IAAI,EAAE,WAAW;IACjBa,KAAK,EAAE,cAAc;IACrBC,IAAI,EAAE,IAAI;IACVC,MAAM,EAAE;EACV,CAAC,CAAC,EACF;IACEd,MAAM,EAAE,GAAG;IACXC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CACF,CAAC;AACH,CAAC,CAAC,EAEFZ,IAAI,CAAC0B,GAAG,CAAC,uBAAuB,EAAE,MAAM;EACtC,OAAO,IAAIrB,QAAQ,CAAC,IAAI,EAAE;IAAEM,MAAM,EAAE;EAAI,CAAC,CAAC;AAC5C,CAAC,CAAC,EAEFX,IAAI,CAACa,GAAG,CAAC,gBAAgB,EAAE,MAAM;EAC/B,OAAO,IAAIR,QAAQ,CACjBC,IAAI,CAACC,SAAS,CAACN,aAAa,CAAC,EAC7B;IACEU,MAAM,EAAE,GAAG;IACXC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CACF,CAAC;AACH,CAAC;;AAED;AAAA,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}