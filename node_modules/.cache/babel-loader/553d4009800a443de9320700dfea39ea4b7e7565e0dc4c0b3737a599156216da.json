{"ast":null,"code":"import { http } from 'msw';\n// import testCases from '../mock-data/test-cases.json';\n// import bugs from '../mock-data/bugs.json';\nimport dashboardData from '../mock-data/dashboard.json';\nexport const handlers = [\n// Mock GET /api/test-cases\n// http.get('/api/test-cases', (req, res, ctx) => {\n//   return res(ctx.status(200), ctx.json(testCases));\n// }),\n\n// Mock GET /api/bugs\n// http.get('/api/bugs', (req, res, ctx) => {\n//   return res(ctx.status(200), ctx.json(bugs));\n// }),\n\n// Mock POST /api/login\nhttp.post('/api/login', (req, res, ctx) => {\n  return res(ctx.status(200), ctx.json({\n    token: 'mock-token',\n    user: {\n      name: 'Demo User'\n    }\n  }));\n}), http.get('/api/applicationsettings', (req, res, ctx) => {\n  return res(ctx.status(200), ctx.json({\n    theme: 'dark',\n    notifications: true,\n    testCoverage: 94,\n    assignedTasks: 6,\n    testCasesCreated: 30,\n    bugsReported: 12,\n    automationScripts: 8,\n    failedTests: 2\n    // Add more as needed for your dashboard\n  }));\n}), http.get('/api/activity-logs', (req, res, ctx) => {\n  return res(ctx.status(200), ctx.json([{\n    id: 'AL-001',\n    description: 'Manual test run completed',\n    date: '2024-06-01',\n    status: 'Passed'\n  }, {\n    id: 'AL-002',\n    description: 'Automated test failed',\n    date: '2024-06-02',\n    status: 'Failed'\n  }\n  // Add more as needed\n  ]));\n}), http.get('/api/settings/profile', (req, res, ctx) => {\n  return res(ctx.status(200), ctx.json({\n    name: 'Demo User',\n    email: 'demo@zap.com',\n    role: 'QA',\n    avatar: 'https://ui-avatars.com/api/?name=Demo+User'\n  }));\n}), http.put('/api/settings/profile', (req, res, ctx) => {\n  return res(ctx.status(200));\n}), http.get('/api/dashboard', (req, res, ctx) => {\n  console.log('MSW: /api/dashboard handler called');\n  return res(ctx.status(200), ctx.json(dashboardData));\n})\n\n// Add more handlers as needed...\n];","map":{"version":3,"names":["http","dashboardData","handlers","post","req","res","ctx","status","json","token","user","name","get","theme","notifications","testCoverage","assignedTasks","testCasesCreated","bugsReported","automationScripts","failedTests","id","description","date","email","role","avatar","put","console","log"],"sources":["/Users/pournima/Documents/Zap Release 1/ZapDashboard/zap-prototype/src/mocks/handlers.js"],"sourcesContent":["import { http } from 'msw';\n// import testCases from '../mock-data/test-cases.json';\n// import bugs from '../mock-data/bugs.json';\nimport dashboardData from '../mock-data/dashboard.json';\n\nexport const handlers = [\n  // Mock GET /api/test-cases\n  // http.get('/api/test-cases', (req, res, ctx) => {\n  //   return res(ctx.status(200), ctx.json(testCases));\n  // }),\n\n  // Mock GET /api/bugs\n  // http.get('/api/bugs', (req, res, ctx) => {\n  //   return res(ctx.status(200), ctx.json(bugs));\n  // }),\n\n  // Mock POST /api/login\n  http.post('/api/login', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({ token: 'mock-token', user: { name: 'Demo User' } })\n    );\n  }),\n\n  http.get('/api/applicationsettings', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        theme: 'dark',\n        notifications: true,\n        testCoverage: 94,\n        assignedTasks: 6,\n        testCasesCreated: 30,\n        bugsReported: 12,\n        automationScripts: 8,\n        failedTests: 2,\n        // Add more as needed for your dashboard\n      })\n    );\n  }),\n\n  http.get('/api/activity-logs', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json([\n        { id: 'AL-001', description: 'Manual test run completed', date: '2024-06-01', status: 'Passed' },\n        { id: 'AL-002', description: 'Automated test failed', date: '2024-06-02', status: 'Failed' },\n        // Add more as needed\n      ])\n    );\n  }),\n\n  http.get('/api/settings/profile', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        name: 'Demo User',\n        email: 'demo@zap.com',\n        role: 'QA',\n        avatar: 'https://ui-avatars.com/api/?name=Demo+User'\n      })\n    );\n  }),\n\n  http.put('/api/settings/profile', (req, res, ctx) => {\n    return res(ctx.status(200));\n  }),\n\n  http.get('/api/dashboard', (req, res, ctx) => {\n    console.log('MSW: /api/dashboard handler called');\n    return res(\n      ctx.status(200),\n      ctx.json(dashboardData)\n    );\n  }),\n\n  // Add more handlers as needed...\n];"],"mappings":"AAAA,SAASA,IAAI,QAAQ,KAAK;AAC1B;AACA;AACA,OAAOC,aAAa,MAAM,6BAA6B;AAEvD,OAAO,MAAMC,QAAQ,GAAG;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACAF,IAAI,CAACG,IAAI,CAAC,YAAY,EAAE,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EACzC,OAAOD,GAAG,CACRC,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,EACfD,GAAG,CAACE,IAAI,CAAC;IAAEC,KAAK,EAAE,YAAY;IAAEC,IAAI,EAAE;MAAEC,IAAI,EAAE;IAAY;EAAE,CAAC,CAC/D,CAAC;AACH,CAAC,CAAC,EAEFX,IAAI,CAACY,GAAG,CAAC,0BAA0B,EAAE,CAACR,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EACtD,OAAOD,GAAG,CACRC,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,EACfD,GAAG,CAACE,IAAI,CAAC;IACPK,KAAK,EAAE,MAAM;IACbC,aAAa,EAAE,IAAI;IACnBC,YAAY,EAAE,EAAE;IAChBC,aAAa,EAAE,CAAC;IAChBC,gBAAgB,EAAE,EAAE;IACpBC,YAAY,EAAE,EAAE;IAChBC,iBAAiB,EAAE,CAAC;IACpBC,WAAW,EAAE;IACb;EACF,CAAC,CACH,CAAC;AACH,CAAC,CAAC,EAEFpB,IAAI,CAACY,GAAG,CAAC,oBAAoB,EAAE,CAACR,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EAChD,OAAOD,GAAG,CACRC,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,EACfD,GAAG,CAACE,IAAI,CAAC,CACP;IAAEa,EAAE,EAAE,QAAQ;IAAEC,WAAW,EAAE,2BAA2B;IAAEC,IAAI,EAAE,YAAY;IAAEhB,MAAM,EAAE;EAAS,CAAC,EAChG;IAAEc,EAAE,EAAE,QAAQ;IAAEC,WAAW,EAAE,uBAAuB;IAAEC,IAAI,EAAE,YAAY;IAAEhB,MAAM,EAAE;EAAS;EAC3F;EAAA,CACD,CACH,CAAC;AACH,CAAC,CAAC,EAEFP,IAAI,CAACY,GAAG,CAAC,uBAAuB,EAAE,CAACR,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EACnD,OAAOD,GAAG,CACRC,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,EACfD,GAAG,CAACE,IAAI,CAAC;IACPG,IAAI,EAAE,WAAW;IACjBa,KAAK,EAAE,cAAc;IACrBC,IAAI,EAAE,IAAI;IACVC,MAAM,EAAE;EACV,CAAC,CACH,CAAC;AACH,CAAC,CAAC,EAEF1B,IAAI,CAAC2B,GAAG,CAAC,uBAAuB,EAAE,CAACvB,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EACnD,OAAOD,GAAG,CAACC,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC7B,CAAC,CAAC,EAEFP,IAAI,CAACY,GAAG,CAAC,gBAAgB,EAAE,CAACR,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EAC5CsB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;EACjD,OAAOxB,GAAG,CACRC,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,EACfD,GAAG,CAACE,IAAI,CAACP,aAAa,CACxB,CAAC;AACH,CAAC;;AAED;AAAA,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}