{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:4000/api';\nexport const jiraService = {\n  // Get Jira settings\n  getSettings: async () => {\n    const response = await axios.get(`${API_BASE_URL}/settings/jira`);\n    return response.data;\n  },\n  // Update Jira settings\n  updateSettings: async settings => {\n    const response = await axios.put(`${API_BASE_URL}/settings/jira`, settings);\n    return response.data;\n  },\n  // Link a test case or bug to Jira\n  linkToJira: async (type, id, jiraKey) => {\n    const response = await axios.post(`${API_BASE_URL}/jira/link`, {\n      type,\n      id,\n      jiraKey\n    });\n    return response.data;\n  },\n  // Bulk link multiple items to Jira\n  bulkLinkToJira: async items => {\n    const response = await axios.post(`${API_BASE_URL}/jira/bulk-link`, {\n      items\n    });\n    return response.data;\n  },\n  // Get Jira issue details\n  getIssueDetails: async key => {\n    const response = await axios.get(`${API_BASE_URL}/jira/issues/${key}`);\n    return response.data;\n  },\n  // Update Jira issue status\n  updateIssueStatus: async (key, status) => {\n    const response = await axios.put(`${API_BASE_URL}/jira/issues/${key}/status`, {\n      status\n    });\n    return response.data;\n  },\n  // Create a new Jira issue\n  createIssue: async issueData => {\n    const response = await axios.post(`${API_BASE_URL}/jira/issues`, issueData);\n    return response.data;\n  },\n  // Search Jira issues\n  searchIssues: async query => {\n    const response = await axios.get(`${API_BASE_URL}/jira/search`, {\n      params: {\n        query\n      }\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","jiraService","getSettings","response","get","data","updateSettings","settings","put","linkToJira","type","id","jiraKey","post","bulkLinkToJira","items","getIssueDetails","key","updateIssueStatus","status","createIssue","issueData","searchIssues","query","params"],"sources":["/Users/pournima/Documents/Zap Portotype/15 june/Zap-Propotype/src/services/jiraService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:4000/api';\n\nexport const jiraService = {\n  // Get Jira settings\n  getSettings: async () => {\n    const response = await axios.get(`${API_BASE_URL}/settings/jira`);\n    return response.data;\n  },\n\n  // Update Jira settings\n  updateSettings: async (settings) => {\n    const response = await axios.put(`${API_BASE_URL}/settings/jira`, settings);\n    return response.data;\n  },\n\n  // Link a test case or bug to Jira\n  linkToJira: async (type, id, jiraKey) => {\n    const response = await axios.post(`${API_BASE_URL}/jira/link`, { type, id, jiraKey });\n    return response.data;\n  },\n\n  // Bulk link multiple items to Jira\n  bulkLinkToJira: async (items) => {\n    const response = await axios.post(`${API_BASE_URL}/jira/bulk-link`, { items });\n    return response.data;\n  },\n\n  // Get Jira issue details\n  getIssueDetails: async (key) => {\n    const response = await axios.get(`${API_BASE_URL}/jira/issues/${key}`);\n    return response.data;\n  },\n\n  // Update Jira issue status\n  updateIssueStatus: async (key, status) => {\n    const response = await axios.put(`${API_BASE_URL}/jira/issues/${key}/status`, { status });\n    return response.data;\n  },\n\n  // Create a new Jira issue\n  createIssue: async (issueData) => {\n    const response = await axios.post(`${API_BASE_URL}/jira/issues`, issueData);\n    return response.data;\n  },\n\n  // Search Jira issues\n  searchIssues: async (query) => {\n    const response = await axios.get(`${API_BASE_URL}/jira/search`, { params: { query } });\n    return response.data;\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,gBAAgB,CAAC;IACjE,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,cAAc,EAAE,MAAOC,QAAQ,IAAK;IAClC,MAAMJ,QAAQ,GAAG,MAAMJ,KAAK,CAACS,GAAG,CAAC,GAAGR,YAAY,gBAAgB,EAAEO,QAAQ,CAAC;IAC3E,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAI,UAAU,EAAE,MAAAA,CAAOC,IAAI,EAAEC,EAAE,EAAEC,OAAO,KAAK;IACvC,MAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAACc,IAAI,CAAC,GAAGb,YAAY,YAAY,EAAE;MAAEU,IAAI;MAAEC,EAAE;MAAEC;IAAQ,CAAC,CAAC;IACrF,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAS,cAAc,EAAE,MAAOC,KAAK,IAAK;IAC/B,MAAMZ,QAAQ,GAAG,MAAMJ,KAAK,CAACc,IAAI,CAAC,GAAGb,YAAY,iBAAiB,EAAE;MAAEe;IAAM,CAAC,CAAC;IAC9E,OAAOZ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAW,eAAe,EAAE,MAAOC,GAAG,IAAK;IAC9B,MAAMd,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,gBAAgBiB,GAAG,EAAE,CAAC;IACtE,OAAOd,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAa,iBAAiB,EAAE,MAAAA,CAAOD,GAAG,EAAEE,MAAM,KAAK;IACxC,MAAMhB,QAAQ,GAAG,MAAMJ,KAAK,CAACS,GAAG,CAAC,GAAGR,YAAY,gBAAgBiB,GAAG,SAAS,EAAE;MAAEE;IAAO,CAAC,CAAC;IACzF,OAAOhB,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAe,WAAW,EAAE,MAAOC,SAAS,IAAK;IAChC,MAAMlB,QAAQ,GAAG,MAAMJ,KAAK,CAACc,IAAI,CAAC,GAAGb,YAAY,cAAc,EAAEqB,SAAS,CAAC;IAC3E,OAAOlB,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAiB,YAAY,EAAE,MAAOC,KAAK,IAAK;IAC7B,MAAMpB,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,cAAc,EAAE;MAAEwB,MAAM,EAAE;QAAED;MAAM;IAAE,CAAC,CAAC;IACtF,OAAOpB,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}