{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Test Cases\nexport const testCaseService = {\n  getAll: () => api.get('/api/test-cases'),\n  getById: id => api.get(`/api/test-cases/${id}`),\n  create: data => api.post('/api/test-cases', data),\n  update: (id, data) => api.put(`/api/test-cases/${id}`, data),\n  delete: id => api.delete(`/api/test-cases/${id}`),\n  generate: userStory => api.post('/api/test-cases/generate', userStory),\n  generateAutomation: id => api.post(`/api/test-cases/${id}/automation`)\n};\n\n// Bugs\nexport const bugService = {\n  getAll: () => api.get('/api/bugs'),\n  getById: id => api.get(`/api/bugs/${id}`),\n  create: data => api.post('/api/bugs', data),\n  update: (id, data) => api.put(`/api/bugs/${id}`, data),\n  delete: id => api.delete(`/api/bugs/${id}`),\n  generate: (description, imageUrls) => api.post('/api/bugs/generate', {\n    description,\n    imageUrls\n  })\n};\n\n// Settings\nexport const settingsService = {\n  get: () => api.get('/api/settings'),\n  update: data => api.put('/api/settings', data),\n  testJiraConnection: config => api.post('/api/settings/test-jira', config),\n  getApplicationSettings: () => fetch('/api/applicationsettings').then(res => res.json()),\n  // New mock settings endpoints\n  getProfile: () => fetch('/api/settings/profile').then(res => res.json()),\n  updateProfile: data => fetch('/api/settings/profile', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }),\n  getNotifications: () => fetch('/api/settings/notifications').then(res => res.json()),\n  updateNotifications: data => fetch('/api/settings/notifications', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }),\n  getIntegrations: () => fetch('/api/settings/integrations').then(res => res.json()),\n  updateIntegrations: data => fetch('/api/settings/integrations', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }),\n  getTheme: () => fetch('/api/settings/theme').then(res => res.json()),\n  updateTheme: data => fetch('/api/settings/theme', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }),\n  getOnboarding: () => fetch('/api/settings/onboarding').then(res => res.json()),\n  updateOnboarding: data => fetch('/api/settings/onboarding', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  })\n};\n\n// AI Chat\nexport const chatService = {\n  sendMessage: message => api.post('/api/chat', {\n    message\n  }),\n  getHistory: () => api.get('/api/chat/history'),\n  generateUserStory: fileName => api.post('/api/chat/generate-user-story', {\n    fileName\n  }),\n  generateTestCase: fileName => api.post('/api/chat/generate-test-case', {\n    fileName\n  }),\n  generateAutomationScript: testCaseId => api.post('/api/chat/generate-automation', {\n    testCaseId\n  }),\n  linkToJira: content => api.post('/api/chat/link-to-jira', {\n    content\n  }),\n  downloadAsPDF: content => api.post('/api/chat/download-pdf', {\n    content\n  }),\n  uploadDocument: formData => api.post('/api/documents/upload', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  })\n};\n\n// Project Management (Mock)\nexport const projectMgtService = {\n  getAllProjects: () => fetch('http://localhost:4000/api/projectmgt').then(res => res.json()),\n  addProject: project => fetch('http://localhost:4000/api/projectmgt', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(project)\n  }).then(res => res.json())\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","testCaseService","getAll","get","getById","id","data","post","update","put","delete","generate","userStory","generateAutomation","bugService","description","imageUrls","settingsService","testJiraConnection","config","getApplicationSettings","fetch","then","res","json","getProfile","updateProfile","method","body","JSON","stringify","getNotifications","updateNotifications","getIntegrations","updateIntegrations","getTheme","updateTheme","getOnboarding","updateOnboarding","chatService","sendMessage","message","getHistory","generateUserStory","fileName","generateTestCase","generateAutomationScript","testCaseId","linkToJira","content","downloadAsPDF","uploadDocument","formData","projectMgtService","getAllProjects","addProject","project"],"sources":["/Users/pournima/Documents/Zap Portotype/15 june/Zap-Propotype/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Test Cases\nexport const testCaseService = {\n  getAll: () => api.get('/api/test-cases'),\n  getById: (id) => api.get(`/api/test-cases/${id}`),\n  create: (data) => api.post('/api/test-cases', data),\n  update: (id, data) => api.put(`/api/test-cases/${id}`, data),\n  delete: (id) => api.delete(`/api/test-cases/${id}`),\n  generate: (userStory) => api.post('/api/test-cases/generate', userStory),\n  generateAutomation: (id) => api.post(`/api/test-cases/${id}/automation`),\n};\n\n// Bugs\nexport const bugService = {\n  getAll: () => api.get('/api/bugs'),\n  getById: (id) => api.get(`/api/bugs/${id}`),\n  create: (data) => api.post('/api/bugs', data),\n  update: (id, data) => api.put(`/api/bugs/${id}`, data),\n  delete: (id) => api.delete(`/api/bugs/${id}`),\n  generate: (description, imageUrls) => api.post('/api/bugs/generate', { description, imageUrls }),\n};\n\n// Settings\nexport const settingsService = {\n  get: () => api.get('/api/settings'),\n  update: (data) => api.put('/api/settings', data),\n  testJiraConnection: (config) => api.post('/api/settings/test-jira', config),\n  getApplicationSettings: () => fetch('/api/applicationsettings').then(res => res.json()),\n\n  // New mock settings endpoints\n  getProfile: () => fetch('/api/settings/profile').then(res => res.json()),\n  updateProfile: (data) => fetch('/api/settings/profile', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) }),\n\n  getNotifications: () => fetch('/api/settings/notifications').then(res => res.json()),\n  updateNotifications: (data) => fetch('/api/settings/notifications', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) }),\n\n  getIntegrations: () => fetch('/api/settings/integrations').then(res => res.json()),\n  updateIntegrations: (data) => fetch('/api/settings/integrations', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) }),\n\n  getTheme: () => fetch('/api/settings/theme').then(res => res.json()),\n  updateTheme: (data) => fetch('/api/settings/theme', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) }),\n\n  getOnboarding: () => fetch('/api/settings/onboarding').then(res => res.json()),\n  updateOnboarding: (data) => fetch('/api/settings/onboarding', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) }),\n};\n\n// AI Chat\nexport const chatService = {\n  sendMessage: (message) => api.post('/api/chat', { message }),\n  getHistory: () => api.get('/api/chat/history'),\n  generateUserStory: (fileName) => api.post('/api/chat/generate-user-story', { fileName }),\n  generateTestCase: (fileName) => api.post('/api/chat/generate-test-case', { fileName }),\n  generateAutomationScript: (testCaseId) => api.post('/api/chat/generate-automation', { testCaseId }),\n  linkToJira: (content) => api.post('/api/chat/link-to-jira', { content }),\n  downloadAsPDF: (content) => api.post('/api/chat/download-pdf', { content }),\n  uploadDocument: (formData) =>\n    api.post('/api/documents/upload', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' },\n    }),\n};\n\n// Project Management (Mock)\nexport const projectMgtService = {\n  getAllProjects: () => fetch('http://localhost:4000/api/projectmgt').then(res => res.json()),\n  addProject: (project) => fetch('http://localhost:4000/api/projectmgt', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(project),\n  }).then(res => res.json()),\n};\n\nexport default api; \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}